---
import Code from "@/icons/Code.astro";
import Github from "@/icons/Github.astro";
import Link from "@/icons/Link.astro";
import { projects } from "@cv";
import { Image } from "astro:assets";
---

<div id="proyectos" class="projects-container">
  <h1>
    <Code />
    Proyectos
  </h1>

  <div class="project-card-container">
    <ul class="projects-list">
      {
        projects?.map(
          ({ name, description, image, url, technologies, github }) => (
            <li class="project-card">
              <section class="card-body flex flex-col">
                <figure class="w-full rounded-lg overflow-hidden">
                  <Image
                    src={image}
                    alt={`Screenshot of ${name}`}
                    width={700}
                    height={700}
                    loading="lazy"
                    decoding="async"
                    class="w-full h-full duration-200"
                  />
                </figure>
              </section>

              <section class="card-info">
                <h2 class="text-lg font-bold mb-1 uppercase md:text-base lg:text-xl">
                  {name}
                </h2>
                <p class="text-xs text-slate-300 lg:text-sm text-pretty">
                  {description}
                </p>

                <ul class="flex flex-row flex-wrap gap-2">
                  {technologies?.map(({ name, logo, color }) => {
                    const colorHex = (color: string) => {
                      const [r, g, b] = color.split(",");

                      const [red, green, blue] = [r, g, b].map((value) =>
                        parseInt(value)
                      );

                      const redHex = red.toString(16).padStart(2, "0");
                      const greenHex = green.toString(16).padStart(2, "0");
                      const blueHex = blue.toString(16).padStart(2, "0");

                      // Combinar los valores hexadecimales para formar el color completo
                      const hexColor = `#${redHex}${greenHex}${blueHex}`;
                      // console.log(hexColor);
                      return hexColor;
                    };

                    return (
                      <li
                        style={{
                          backgroundColor: `rgba(${color},0.3)`,
                          borderWidth: "1px",
                          borderColor: `${colorHex(color)}`,
                        }}
                        class={`flex flex-row gap-1 items-center px-2 py-[2px] rounded-full !w-auto relative z-10 hint--bottom-right`}
                        aria-label={name}
                      >
                        <figure
                          class="w-3 h-3 md:w-3 md:h-3 lg:w-4 lg:h-4"
                          id="technology"
                        >
                          <Image
                            src={logo}
                            alt={name}
                            width={20}
                            height={20}
                            loading="lazy"
                            decoding="async"
                            class="w-full h-full"
                          />
                        </figure>
                      </li>
                    );
                  })}
                </ul>

                <span class="card-links">
                  {github ? (
                    <a href={github} target="_blank">
                      <figure>
                        <Github />
                      </figure>
                      <p>Repositorio</p>
                    </a>
                  ) : null}

                  {url ? (
                    <a href={url} target="_blank">
                      <figure>
                        <Link />
                      </figure>
                      <p>Visitar</p>
                    </a>
                  ) : null}
                </span>
              </section>
            </li>
          )
        )
      }
    </ul>
  </div>
</div>

<style>
  .hint--bottom-right {
    &::after {
      @apply text-xs bg-[#1b4a83] rounded mt-[5px];
    }

    &::before {
      @apply bg-[#1b4a83] mt-[1.5px];
    }
  }

  h1 {
    @apply text-2xl md:text-3xl font-bold mb-10 flex flex-row gap-3 items-center;
  }
  .projects-container {
    @apply w-full pt-16 md:pt-36 mx-auto container lg:max-w-4xl md:max-w-2xl select-none relative;

    .project-card-container {
      @apply relative;

      /* first ul */
      .projects-list {
        @apply grid-flow-row grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-10;

        /* first li */
        .project-card {
          @apply relative flex flex-col bg-[rgba(12,31,52)] rounded-3xl border-2 border-slate-700 overflow-hidden;

          .card-info {
            @apply absolute py-4 px-6 md:py-4 md:px-4 lg:py-6 lg:px-4 flex-col justify-between  rounded-lg w-full h-full duration-200 z-10 hidden;
            animation: fadeIn ease-in-out;
            animation-duration: 250ms;

            /* Repository and Visit Links */
            .card-links {
              @apply flex flex-row items-center gap-6;

              & a {
                @apply flex flex-row items-center gap-2 bg-slate-800/60 border border-slate-700 rounded-lg px-2 py-1 lg:px-3 duration-200;

                &:hover {
                  @apply bg-slate-700/60 text-sky-100;
                }

                & figure {
                  @apply w-3 h-3 lg:w-5 lg:h-5 flex items-center justify-center;
                }

                & p {
                  @apply text-xs lg:text-sm;
                }
              }
            }
          }

          &::before {
            content: "";
            @apply absolute top-0 left-0 w-full h-full bg-black/75 backdrop-blur-sm z-[1] opacity-0 duration-200;
          }

          &:hover {
            .card-info {
              @apply flex;
            }

            .card-body {
              & figure img {
                @apply scale-105;
              }
            }

            &::before {
              @apply opacity-100;
            }
          }
        }
      }
    }
  }

  @keyframes fadeIn {
    0% {
      opacity: 0;
      transform: translateY(10px);
    }
    100% {
      opacity: 1;
    }
  }
</style>
